// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watchdog.Data;

#nullable disable

namespace Watchdog.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250306012049_Context-Modify")]
    partial class ContextModify
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Watchdog.Models.Processo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Processo");
                });

            modelBuilder.Entity("Watchdog.Models.RecoveryAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int>("WatchdogTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WatchdogTaskId");

                    b.ToTable("RecoveryActions");

                    b.HasDiscriminator<string>("ActionType").HasValue("RecoveryAction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Watchdog.Models.WatchdogTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastCheckTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastFailureTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSuccessTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WatchdogTasks");

                    b.HasDiscriminator<string>("TaskType").HasValue("WatchdogTask");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Watchdog.Models.ExecuteCommandAction", b =>
                {
                    b.HasBaseType("Watchdog.Models.RecoveryAction");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ExecuteCommand");
                });

            modelBuilder.Entity("Watchdog.Models.RestartProcessAction", b =>
                {
                    b.HasBaseType("Watchdog.Models.RecoveryAction");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("RestartProcess");
                });

            modelBuilder.Entity("Watchdog.Models.RestartServiceAction", b =>
                {
                    b.HasBaseType("Watchdog.Models.RecoveryAction");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("RestartService");
                });

            modelBuilder.Entity("Watchdog.Models.HttpWatchdogTask", b =>
                {
                    b.HasBaseType("Watchdog.Models.WatchdogTask");

                    b.Property<int>("HttpRestMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("HTTP");
                });

            modelBuilder.Entity("Watchdog.Models.UdpWatchdogTask", b =>
                {
                    b.HasBaseType("Watchdog.Models.WatchdogTask");

                    b.Property<string>("ExpectedResponse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SendData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Timeout")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("UDP");
                });

            modelBuilder.Entity("Watchdog.Models.RecoveryAction", b =>
                {
                    b.HasOne("Watchdog.Models.WatchdogTask", "WatchdogTask")
                        .WithMany("RecoveryActions")
                        .HasForeignKey("WatchdogTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WatchdogTask");
                });

            modelBuilder.Entity("Watchdog.Models.WatchdogTask", b =>
                {
                    b.Navigation("RecoveryActions");
                });
#pragma warning restore 612, 618
        }
    }
}
